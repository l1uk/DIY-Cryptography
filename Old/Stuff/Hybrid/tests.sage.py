

# This file was *autogenerated* from the file tests.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)#trascrivi le trasformazioni lineari T
#genera permutazioni casuali
#verifica se la somma Ã¨ invertibile
import numpy as np
bit = _sage_const_4 
M = _sage_const_4 
N = _sage_const_4 

AnelloPol = PolynomialRing(FiniteField(_sage_const_2 ),'x')
Ideale = AnelloPol.ideal([x**bit])
R = AnelloPol.quotient(Ideale,names='t')
R(_sage_const_1 )
MS = MatrixSpace(R,M*N)
T1_list = [[_sage_const_0 ]*i+[i+_sage_const_1 ]*(M*N-i) for i in range(M*N)]
T1_arr = np.array(T1_list).transpose()
T2_arr = np.flip(T1_arr,axis=_sage_const_1 )
T = T2_arr @ T1_arr
print(T)
t = R('t')
def Z2R(n):
    binario = int(n).digits(_sage_const_2 )
    base = [t**i for i in range(len(binario))]
    return np.dot(base,binario)

def Zarr2R(old):
    new = MS(old)
    shape = np.shape(old)
    for i in range(shape[_sage_const_0 ]):
        for j in range(shape[_sage_const_0 ]):
            new[i,j] = Z2R(old[i,j])
    return new

print(Zarr2R(T))

